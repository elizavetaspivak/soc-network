{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/AuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm..tsx","redux/dialogsSelectors.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","className","s","dialog","active","id","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requiredField","getDialogsPage","dialogPage","compose","dialogsPage","dispatch","sendMessage","newMessage","addNewMessageActionCreator","dialogsElements","dialogs","map","d","messagesElements","messages","m","Helmet","content","dialogs_items","formData","newMessageBody"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCQ/MC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAWhC,OADiCC,YAAQN,EAARM,EARP,SAACC,GACvB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,YAEA,OAAKL,EAEE,cAACG,EAAD,eAAeG,IAFF,cAAC,IAAD,CAAUC,GAAI,gB,6FCZnC,SAASC,EAAWH,GACvB,OACI,qBAAKI,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,SACI,cAAC,IAAD,CAASL,GAAI,YAAcF,EAAMQ,GAAjC,SAAsCR,EAAMS,SCJjD,SAASC,EAAQV,GACpB,OACI,qBAAKI,UAAWC,IAAEM,QAAlB,SAA4BX,EAAMW,U,8CCApCC,EAAeC,YAAiB,KAgBzBC,EAA0BC,YAA8B,CAACC,KAAM,wBAArCD,EAdwC,SAACf,GAC5E,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBX,KAAM,iBAAkBY,UAAWC,IACtEC,SAAU,CAACC,IAAeZ,OAErC,8BACI,kD,6BCjBHa,EAAiB,SAAC/B,GAC3B,OAAOA,EAAMgC,YC6BFC,sBACX5B,aAfkB,SAACL,GACnB,MAAO,CACHkC,YAAaH,EAAe/B,OAIX,SAACmC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAA2BD,SAO5ClC,IAFW8B,EClBR,SAAiB3B,GACpB,IAAMiC,EAAkBjC,EAAM4B,YAAYM,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAACjC,EAAD,CAAYM,KAAM2B,EAAE3B,KAAiBD,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAEtF6B,EAAmBrC,EAAM4B,YAAYU,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC7B,EAAD,CAASC,QAAS4B,EAAE5B,QAAoBH,GAAI+B,EAAE/B,IAAZ+B,EAAE/B,OAMjG,OACI,sBAAKJ,UAAWC,IAAE6B,QAAlB,UACI,eAACM,EAAA,EAAD,WACI,4CACA,sBAAM/B,KAAK,cAAcgC,QAAQ,2BAErC,qBAAKrC,UAAWC,IAAEqC,cAAlB,SACKT,IAEL,sBAAK7B,UAAWC,IAAEiC,SAAlB,UACKD,EACD,cAACvB,EAAD,CAAyBG,SAfpB,SAAC0B,GACd3C,EAAM8B,YAAYa,EAASC","file":"static/js/4.27090034.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogs_items\":\"Dialogs_dialogs_items__16PrC\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import {Redirect} from 'react-router-dom';\nimport React, {ComponentType} from 'react';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToProps = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType):MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToProps) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","import s from './../Dialogs.module.css'\nimport {NavLink} from 'react-router-dom';\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n}\n\nexport function DialogItem(props: DialogItemPropsType) {\n    return (\n        <div className={`${s.dialog} ${s.active}`}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}","import s from './../Dialogs.module.css'\n\ntype MessageType = {\n    message: string\n    id: number\n}\n\nexport function Message(props: MessageType) {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Textarea} from '../common/FormsControls/FormsControl';\nimport {maxLengthCreator, requiredField} from '../../utils/validators/validators';\n\nexport type AddMessageFormType = {\n    newMessageBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100)\n\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} name={'newMessageBody'} component={Textarea}\n                       validate={[requiredField, maxLength100]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageFormReduxForm = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {AppStateType} from './redux-store';\n\nexport const getDialogsPage = (state: AppStateType) => {\n    return state.dialogPage\n}\n","import React from 'react'\nimport {addNewMessageActionCreator} from '../../redux/dialogsReduser';\nimport {Dialogs} from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType, DialogPageType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\nimport {getDialogsPage} from '../../redux/dialogsSelectors';\n\n\ntype mapStateToPropsType = {\n    dialogsPage: DialogPageType\n}\n\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessage: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogsPage: getDialogsPage(state)\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessage: string) => {\n            dispatch(addNewMessageActionCreator(newMessage))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)","import React from 'react'\nimport s from './Dialogs.module.css'\nimport {DialogItem} from './DialogItem/DialogItem';\nimport {Message} from './Message/Message';\nimport {Helmet} from 'react-helmet';\nimport { DialogPageType } from '../../redux/redux-store';\nimport {AddMessageFormReduxForm, AddMessageFormType} from './AddMessageForm.';\n\n\ntype DialogsPropsType = {\n    dialogsPage: DialogPageType\n    sendMessage: (newMessage: string) => void\n}\n\nexport function Dialogs(props: DialogsPropsType) {\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\n\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\n\n    const onSubmit = (formData: AddMessageFormType) => {\n        props.sendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <Helmet>\n                <title>Dialogs</title>\n                <meta name=\"description\" content=\"Dialogs application\" />\n            </Helmet>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <AddMessageFormReduxForm onSubmit={onSubmit}/>\n            </div>\n        </div>\n    )\n}\n\n"],"sourceRoot":""}