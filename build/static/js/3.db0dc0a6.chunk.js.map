{"version":3,"sources":["hoc/AuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/My Posts/MyPosts.module.css","components/Profile/My Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/My Posts/Post/Post.tsx","components/Profile/My Posts/MyPostsForm..tsx","components/Profile/My Posts/MyPosts.tsx","redux/profilesSelectors.ts","components/Profile/My Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","updateStatus","value","onChange","e","currentTarget","autoFocus","className","s","onDoubleClick","createField","type","placeholder","name","component","validate","Field","ProfileDataFormReduxForm","reduxForm","form","profile","useSelector","profilePage","onSubmit","handleSubmit","error","formSummaryError","style","listStyleType","paddingLeft","marginLeft","Input","aboutMe","Textarea","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","ProfileInfo","description_block","profilePhoto","src","photos","large","userPhoto","alt","updatePhoto","isOwner","target","files","length","savePhoto","onMainPhotoSelected","initialValues","formData","saveProfile","then","ProfileData","goToEditMode","changeStatusAC","Preloader","fullName","entries","href","onClick","Post","item","message","likesCount","maxLength10","maxLengthCreator","MyPostsFormRedux","requiredField","MyPosts","React","memo","postsElements","posts","p","id","posts_block","addPostActionCreator","newPostBody","getMeProfile","getMeStatus","getMeAutorizedUserID","userId","getMePosts","MyPostsContainer","Profile","document","title","Helmet","content","compose","autorizedUserID","getIsAuth","setUserProfile","getMeProfileThunkCreator","getMeStatusThunkCreator","updateStatusThunkCreator","withRouter","Number","match","params","history","push"],"mappings":"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","file":"static/js/3.db0dc0a6.chunk.js","sourcesContent":["import {Redirect} from 'react-router-dom';\nimport React, {ComponentType} from 'react';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype MapStateToProps = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType):MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToProps) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description_block\":\"ProfileInfo_description_block__187mR\",\"profilePhoto\":\"ProfileInfo_profilePhoto__9KLOb\",\"updatePhoto\":\"ProfileInfo_updatePhoto__1oo45\",\"image_block\":\"ProfileInfo_image_block__2czoV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__SCDgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_block\":\"MyPosts_posts_block__12W53\",\"posts\":\"MyPosts_posts__3ZUOo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__371Kq\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './ProfileStatus.module.css'\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n}\n\nexport function ProfileStatusWithHooks(props: ProfileStatusWithHooksPropsType) {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const ChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {editMode ?\n                <div>\n                    <input onBlur={deactivateEditMode} value={status} onChange={ChangeStatus} autoFocus/>\n                </div>\n                : <div className={s.status}>\n                   Status: <span onDoubleClick={activateEditMode}>{props.status} </span>\n                </div>\n            }\n        </div>\n\n    )\n}","import {useSelector} from 'react-redux';\nimport {Input, Textarea} from '../../common/FormsControls/FormsControl';\nimport s from '../../common/FormsControls/FormsControl.module.css';\nimport {Field, reduxForm} from 'redux-form';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {UserProfilePage} from '../../../redux/profileReduser';\n\nexport const createField = (type: string, placeholder: string, name: string, component: React.FC, validate: any) => {\n    return <div>\n        <Field\n            type={type}\n            placeholder={placeholder}\n            name={name}\n            component={component}\n            validate={validate}/>\n    </div>\n}\n\nfunction ProfileDataForm(props: any) {\n    const profile = useSelector<AppStateType, UserProfilePage>(state => state.profilePage.profile)\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            {props.error && <div className={s.formSummaryError}>{props.error}</div>}\n            <div style={{listStyleType: 'none', paddingLeft: '0px', marginLeft: '0px'}}>\n                <div><b>Full name:</b>\n                    {createField('textarea', 'Full  name', 'fullName', Input, [])} </div>\n                <div><b>About Me: </b>{profile.aboutMe}\n                    {createField('textarea', 'About Me', 'aboutMe', Textarea, [])}\n                </div>\n                <div><b>Looking for a job:</b> {profile.lookingForAJob ? 'Yes' : 'No'}\n                    {createField('checkbox', '', 'lookingForAJob', Input, [])}</div>\n            </div>\n            <div>\n                <b>My professional skills</b> : {profile.lookingForAJobDescription}\n                {createField('textarea', 'My professional skills', 'lookingForAJobDescription', Textarea, [])}\n            </div>\n\n            <div>\n\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                return <div className=\"contact\">\n                    <b>{key}: {createField(key, 'textarea', 'contacts.' + key, Input, [])} </b>\n                </div>\n            })}\n            </div>\n            <div>\n                <button>Save</button>\n            </div>\n        </form>\n    )\n}\n\nexport const ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)","import s from './ProfileInfo.module.css'\nimport {UserProfilePage} from '../../../redux/profileReduser';\nimport {Preloader} from '../../common/Preloader/Preloader';\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/avatar.jpg'\nimport {ChangeEvent, useState} from 'react';\nimport {ProfileDataFormReduxForm} from './ProfileDataForm';\nimport {UpdateProfileType} from '../../../api/api';\n\ntype ProfileInfoPropsType = {\n    profile: UserProfilePage | null\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: any\n}\n\nexport function ProfileInfo(props: ProfileInfoPropsType) {\n    const [editMode, setEditMode] = useState(false)\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            props.savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: any) => {\n        props.saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    const goToEditMode = () => {\n        setEditMode(true)\n    }\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.description_block}>\n                <div className={s.profilePhoto}>\n                    <img src={props.profile.photos.large || userPhoto} alt={''}/>\n                    <div className={s.updatePhoto}>\n                        {props.isOwner ? <input type={'file'} onChange={(e) => onMainPhotoSelected(e)}/> : ''}\n                    </div>\n                </div>\n                {editMode ?\n                    <ProfileDataFormReduxForm initialValues={props.profile} onSubmit={onSubmit}/> :\n                    <ProfileData goToEditMode={goToEditMode} isOwner={props.isOwner} profile={props.profile}\n                                 status={props.status}\n                                 updateStatus={props.updateStatus}\n                                 changeStatusAC={props.changeStatusAC}/>}\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataProps = {\n    profile: UserProfilePage\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nfunction ProfileData(props: ProfileDataProps) {\n    return (\n        <div>\n            <h1>Name: {props.profile.fullName}</h1>\n            <ProfileStatusWithHooks status={props.status} changeStatusAC={props.changeStatusAC}\n                                    updateStatus={props.updateStatus}/>\n            <p>About Me: {props.profile.aboutMe}</p>\n            <p>Looking for a job: {props.profile.lookingForAJob ? 'Yes ' : 'No '}</p>\n            {props.profile.lookingForAJob &&\n            <div>\n                My professional skills: {props.profile.lookingForAJobDescription}\n            </div>}\n            <div>\n                Contacts: {props.profile.contacts && Object.entries(props.profile.contacts).map(value => {\n                return value[1] && <div><a href={value[1]}>{value[0]}</a></div>\n            })}\n            </div>\n            {props.isOwner ? <div>\n                <button onClick={props.goToEditMode}>EDIT</button>\n            </div> : ''}\n        </div>\n    )\n}\n\n","import s from './Post.module.css'\n\ntype PostPropsType = {\n    message: string\n    likesCount: number\n    id: number\n}\n\nexport function Post(props: PostPropsType) {\n    return (\n\n        <div className={s.item}>\n            <img\n                src='https://www.liveabout.com/thmb/pElYdfgKoydmsrso8fiU1wd-jO0=/1449x1449/smart/filters:no_upscale()/Avatar_12_HR_01-56a00ca93df78cafda9fd17c.jpg'/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n\n    )\n}\n\n\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\nimport {Textarea} from '../../common/FormsControls/FormsControl';\n\nexport type MyPostsFormType = {\n    newPostBody: string\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nexport const MyPostsForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your post'} name={'newPostBody'} component={Textarea}\n                       validate={[requiredField, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add</button>\n            </div>\n        </form>\n    )\n}\n\nexport const MyPostsFormRedux = reduxForm<MyPostsFormType>({form: 'profileMyPostsForm'})(MyPostsForm)","import React from 'react'\nimport s from './MyPosts.module.css'\nimport {Post} from './Post/Post';\nimport {PostType} from '../../../redux/redux-store';\nimport {MyPostsFormRedux, MyPostsFormType} from './MyPostsForm.';\n\n\ntype MyPostsType = {\n    addPostActionCreator: (newPostBody: string) => void\n    posts: Array<PostType>\n}\n\nexport const MyPosts = React.memo(function (props: MyPostsType) {\n    const postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} id={p.id}/>)\n\n    const onSubmit = (formData: MyPostsFormType) => {\n        props.addPostActionCreator(formData.newPostBody)\n    }\n\n    return (\n        <div className={s.posts_block}>\n            <h3>My posts</h3>\n            <MyPostsFormRedux onSubmit={onSubmit}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\n\n","import {AppStateType} from './redux-store';\n\nexport const getMeProfile = (state: AppStateType) => {\n    return state.profilePage.profile\n}\n\nexport const getMeStatus = (state: AppStateType) => {\n    return state.profilePage.status\n}\n\nexport const getMeAutorizedUserID = (state: AppStateType) => {\n    return state.auth.userId\n}\n\nexport const getMePosts = (state: AppStateType) => {\n    return state.profilePage.posts\n}\n","import React from 'react'\nimport {addPostActionCreator} from '../../../redux/profileReduser';\nimport {MyPosts} from './MyPosts';\nimport {AppStateType, PostType} from '../../../redux/redux-store';\nimport {connect} from 'react-redux';\nimport {getMePosts} from '../../../redux/profilesSelectors';\n\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        posts: getMePosts(state)\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, {addPostActionCreator})(MyPosts);\n\n\n","import s from './Profile.module.css'\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport React, {ReactNode} from 'react';\nimport {MyPostsContainer} from './My Posts/MyPostsContainer';\nimport {Helmet} from 'react-helmet';\nimport {UserProfilePage} from '../../redux/profileReduser';\nimport {UpdateProfileType} from '../../api/api';\n\ntype ProfilePropsType = {\n    children?: ReactNode\n    profile: UserProfilePage | null\n    status: string\n    changeStatusAC: (newStatus: string) => void\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (formData: UpdateProfileType) => void\n}\n\nexport function Profile(props: ProfilePropsType) {\n    document.title = 'Profile'\n\n    return (\n        <div>\n            <Helmet>\n                <title>Profile</title>\n                <meta name=\"description\" content=\"Profile application\"/>\n            </Helmet>\n            <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto}  isOwner={props.isOwner} profile={props.profile} status={props.status} changeStatusAC={props.changeStatusAC}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\n\n","import React, {useEffect} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {Profile} from './Profile';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {\n    changeStatusAC,\n    getMeProfileThunkCreator,\n    getMeStatusThunkCreator, savePhoto, saveProfile,\n    setUserProfile, updateStatusThunkCreator,\n    UserProfilePage\n} from '../../redux/profileReduser';\nimport {withRouter} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router'\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\nimport {compose} from 'redux';\nimport {getMeAutorizedUserID, getMeProfile, getMeStatus} from '../../redux/profilesSelectors';\nimport {getIsAuth} from '../../redux/headerSelectors';\nimport {UpdateProfileType} from '../../api/api';\n\ntype PathParamsType = {\n    userId: string | undefined\n}\ntype MapStateToPropsType = {\n    profile: UserProfilePage | null\n    status: string\n    autorizedUserID: any\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    setUserProfile: (profile: UserProfilePage) => void\n    changeStatusAC: (newStatus: string) => void\n    getMeStatusThunkCreator: (userId: number) => void\n    updateStatusThunkCreator: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (formData: UpdateProfileType) => void\n}\ntype thunkPropsType = {\n    getMeProfileThunkCreator: (userId: number) => void\n}\ntype ProfileAPIContainerPropsType = MapStateToPropsType & MapDispatchToPropsType & thunkPropsType\n\n\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileAPIContainerPropsType\n\n\nfunction ProfileContainer (props: PropsType){\n    useEffect(() => {\n        let userId = Number(props.match.params.userId)\n        if (!userId) {\n            userId = props.autorizedUserID\n            if(!userId){\n                props.history.push('/login')\n            }\n        }\n        props.getMeProfileThunkCreator(userId)\n        props.getMeStatusThunkCreator(userId)\n    },[props.match.params.userId, props.autorizedUserID, props])\n\n        return (\n            <div>\n                <Helmet>\n                    <title>Profile</title>\n                    <meta name=\"description\" content=\"Profile application\"/>\n                </Helmet>\n                <Profile {...props} saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={!props.match.params.userId} profile={props.profile} status={props.status}\n                         changeStatusAC={props.changeStatusAC} updateStatus={props.updateStatusThunkCreator}/>\n            </div>\n        )\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: getMeProfile(state),\n    status: getMeStatus(state),\n    autorizedUserID: getMeAutorizedUserID(state),\n    isAuth: getIsAuth(state)\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        setUserProfile, getMeProfileThunkCreator, changeStatusAC,\n        getMeStatusThunkCreator, updateStatusThunkCreator, savePhoto, saveProfile\n    }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n\n"],"sourceRoot":""}